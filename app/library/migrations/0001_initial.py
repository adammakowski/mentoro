# Generated by Django 3.1.2 on 2020-10-18 17:02

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pyuploadcare.dj.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Podaj tytuł wpisu który chcesz dodać', max_length=150, unique=True, verbose_name='Tytuł')),
                ('slug', models.SlugField(default='', max_length=150, unique=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Podaj cenę w złotówkach za która chcesz sprzedawać materiał', max_digits=7, verbose_name='Cena')),
                ('short_description', ckeditor.fields.RichTextField(help_text='Dodaj krótki opis. Maksymalna ilość znaków to 500', max_length=500, verbose_name='Krótki opis')),
                ('description', ckeditor.fields.RichTextField(help_text='Podaj szczegółowy opis Twojego materiału.', verbose_name='Szczegółowy opis')),
                ('contests', ckeditor.fields.RichTextField(help_text='Podaj zawartość i spis treści Twojego materiału', verbose_name='Zawartość i spis treści')),
                ('requirements', ckeditor.fields.RichTextField(help_text='Wymagana wiedza do zrozumienia materiału', verbose_name='Wymagana wiedza')),
                ('image_preview', pyuploadcare.dj.models.ImageField(help_text='Dodaj zdjęcie podglądowe materiału', verbose_name='Zdjęcie podglądowe')),
                ('video_preview', pyuploadcare.dj.models.FileField(blank=True, help_text='Dodaj film wideo reklamujący i opisujący Twoj materiał', null=True, verbose_name='Wideo prezentacja')),
                ('file_download', pyuploadcare.dj.models.FileField(help_text='Dodaj plik który kupujący będzie mógł pobrać. Dozwolone formaty to: zip, rar, pdf, txt, epub', verbose_name='Plik do pobrania')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('published_date', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='Wybierz kategorię w której chcesz dodać wpis', on_delete=django.db.models.deletion.CASCADE, to='library.category', verbose_name='Kategoria')),
                ('language', models.ForeignKey(help_text='Wybierz język w którym są Twoje treści', on_delete=django.db.models.deletion.CASCADE, to='library.language', verbose_name='Język')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', ckeditor.fields.RichTextField(help_text='Napisz szczegółowy komentarz. Wesprzyj Twórcę tego postu i przekaż swoje podziękowania lub uwagi.', verbose_name='Treść komentarza')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='library.library')),
            ],
            options={
                'ordering': ['created_on'],
            },
        ),
    ]
